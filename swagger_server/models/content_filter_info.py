# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ContentFilterInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, filter_id: int=None, filter_name: str=None, filter_active: bool=None, filter_words: List[object]=None):  # noqa: E501
        """ContentFilterInfo - a model defined in Swagger

        :param filter_id: The filter_id of this ContentFilterInfo.  # noqa: E501
        :type filter_id: int
        :param filter_name: The filter_name of this ContentFilterInfo.  # noqa: E501
        :type filter_name: str
        :param filter_active: The filter_active of this ContentFilterInfo.  # noqa: E501
        :type filter_active: bool
        :param filter_words: The filter_words of this ContentFilterInfo.  # noqa: E501
        :type filter_words: List[object]
        """
        self.swagger_types = {
            'filter_id': int,
            'filter_name': str,
            'filter_active': bool,
            'filter_words': List[object]
        }

        self.attribute_map = {
            'filter_id': 'filter_id',
            'filter_name': 'filter_name',
            'filter_active': 'filter_active',
            'filter_words': 'filter_words'
        }
        self._filter_id = filter_id
        self._filter_name = filter_name
        self._filter_active = filter_active
        self._filter_words = filter_words

    @classmethod
    def from_dict(cls, dikt) -> 'ContentFilterInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContentFilterInfo of this ContentFilterInfo.  # noqa: E501
        :rtype: ContentFilterInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter_id(self) -> int:
        """Gets the filter_id of this ContentFilterInfo.

        id of content filter  # noqa: E501

        :return: The filter_id of this ContentFilterInfo.
        :rtype: int
        """
        return self._filter_id

    @filter_id.setter
    def filter_id(self, filter_id: int):
        """Sets the filter_id of this ContentFilterInfo.

        id of content filter  # noqa: E501

        :param filter_id: The filter_id of this ContentFilterInfo.
        :type filter_id: int
        """
        if filter_id is None:
            raise ValueError("Invalid value for `filter_id`, must not be `None`")  # noqa: E501

        self._filter_id = filter_id

    @property
    def filter_name(self) -> str:
        """Gets the filter_name of this ContentFilterInfo.

        name of content filter  # noqa: E501

        :return: The filter_name of this ContentFilterInfo.
        :rtype: str
        """
        return self._filter_name

    @filter_name.setter
    def filter_name(self, filter_name: str):
        """Sets the filter_name of this ContentFilterInfo.

        name of content filter  # noqa: E501

        :param filter_name: The filter_name of this ContentFilterInfo.
        :type filter_name: str
        """
        if filter_name is None:
            raise ValueError("Invalid value for `filter_name`, must not be `None`")  # noqa: E501

        self._filter_name = filter_name

    @property
    def filter_active(self) -> bool:
        """Gets the filter_active of this ContentFilterInfo.

        status of the content filter  # noqa: E501

        :return: The filter_active of this ContentFilterInfo.
        :rtype: bool
        """
        return self._filter_active

    @filter_active.setter
    def filter_active(self, filter_active: bool):
        """Sets the filter_active of this ContentFilterInfo.

        status of the content filter  # noqa: E501

        :param filter_active: The filter_active of this ContentFilterInfo.
        :type filter_active: bool
        """
        if filter_active is None:
            raise ValueError("Invalid value for `filter_active`, must not be `None`")  # noqa: E501

        self._filter_active = filter_active

    @property
    def filter_words(self) -> List[object]:
        """Gets the filter_words of this ContentFilterInfo.

        list of badwords  # noqa: E501

        :return: The filter_words of this ContentFilterInfo.
        :rtype: List[object]
        """
        return self._filter_words

    @filter_words.setter
    def filter_words(self, filter_words: List[object]):
        """Sets the filter_words of this ContentFilterInfo.

        list of badwords  # noqa: E501

        :param filter_words: The filter_words of this ContentFilterInfo.
        :type filter_words: List[object]
        """
        if filter_words is None:
            raise ValueError("Invalid value for `filter_words`, must not be `None`")  # noqa: E501

        self._filter_words = filter_words
